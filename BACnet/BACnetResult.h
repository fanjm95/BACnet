#pragma once

#include "BACnetTypes.h"

typedef I32 BACnetResult;

BACNET_FORCEINLINE U32 BCNRESULT_CODE(BACnetResult r) { return ((r) & 0xFFFFFF); }
BACNET_FORCEINLINE U8 BCNRESULT_FACILITY(BACnetResult r) { return (((r) & 0x7F000000) >> 24); }
BACNET_FORCEINLINE bool BCNRESULT_SEVERITY(BACnetResult r) { return (((r) & 0x80000000) == 0x80000000); }

#define BCE_FAILED(r) (((r)) < 0)
#define BCE_SUCCEEDED(r) (((r)) >= 0)

#define BCE_SEVERITY_ERROR 0x80000000
#define BCE_SEVERITY_SUCCESS 0x0

#define BCE_FACILITY_NONE	0
#define BCE_FACILITY_SYSTEM 1
#define BCE_FACILITY_BACNET 2

#define MAKE_BACNETERROR(Sev,Fac,Code) (BACnetResult((Sev) | (((Fac) & 0x7F) << 24) | ((Code) & 0xFFFFFF)))

//Generic Success Codes
#define BC_OK										MAKE_BACNETERROR(BCE_SEVERITY_SUCCESS, BCE_FACILITY_NONE, 0)
#define BCS_OK BC_OK
#define BC_FALSE									MAKE_BACNETERROR(BCE_SEVERITY_SUCCESS, BCE_FACILITY_NONE, 1)
#define BCS_FALSE BC_FALSE
#define BCS_NO_OPERATION							MAKE_BACNETERROR(BCE_SEVERITY_SUCCESS, BCE_FACILITY_NONE, 2)
#define BCS_OBJECT_SIGNALED							MAKE_BACNETERROR(BCE_SEVERITY_SUCCESS, BCE_FACILITY_NONE, 3)
#define BCS_MUTEX_ABANDONED							MAKE_BACNETERROR(BCE_SEVERITY_SUCCESS, BCE_FACILITY_NONE, 4)

//Generic Error Codes
#define BCE_INVALID_POINTER							MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_NONE, 1)
#define BCE_INVALID_PARAMETER						MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_NONE, 2)
#define BCE_OUT_OF_MEMORY							MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_NONE, 3)
#define BCE_NOT_ENOUGH_DATA							MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_NONE, 4)
#define BCE_BUFFER_TOO_LONG							MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_NONE, 5)
#define BCE_WAIT_TIMEOUT							MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_NONE, 6)
#define BCE_NOT_INITIALIZED							MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_NONE, 7)
#define BCE_NOT_IMPLEMENTED							MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_NONE, 8)
#define BCE_VERSION_MISMATCH						MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_NONE, 9)
#define BCE_BUFFER_OVERFLOW							MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_NONE, 10)
#define BCE_INVALID_OPERATION						MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_NONE, 11)
#define BCE_NOT_ENOUGH_BUFFER_SPACE					MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_NONE, 12)
#define BCE_OPERATION_CANCELED						MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_NONE, 13)
#define BCE_THREAD_NOT_STARTED						MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_NONE, 14)
#define BCE_THREAD_RUNNING							MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_NONE, 15)
#define BCE_THREAD_TERMINATED						MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_NONE, 16)

//System Error Codes
BACNET_FORCEINLINE BACnetResult BCNRESULT_FROM_SYSTEM(U32 Code)
{
	return BACnetResult(BCE_SEVERITY_ERROR | BCE_FACILITY_SYSTEM | (Code & 0xFFFFFF));
}

//BACnet Success Codes
#define BCS_OFFSET_CLAMPED							MAKE_BACNETERROR(BCE_SEVERITY_SUCCESS, BCE_FACILITY_BACNET, 1)
#define BCS_CLOSING_TAG_0							MAKE_BACNETERROR(BCE_SEVERITY_SUCCESS, BCE_FACILITY_BACNET, 2)
#define BCS_CLOSING_TAG_255							MAKE_BACNETERROR(BCE_SEVERITY_SUCCESS, BCE_FACILITY_BACNET, 257)

static_assert((BCS_CLOSING_TAG_255 - BCS_CLOSING_TAG_0) == 255, "Not enough values between ClosingTag_0 and ClosingTag_255!");

//BACnet Error Codes
#define BCE_NOT_ENOUGH_BUFFERS						MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, 1)
#define BCE_HANDLER_ALREADY_BOUND					MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, 2)
#define BCE_HANDLER_DOES_NOT_EXIST					MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, 3)
#define BCE_WRONG_ADDRESS_TYPE						MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, 4)
#define BCE_INVALID_ADDRESS_FORMAT					MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, 5)
#define BCE_ALREADY_STARTED							MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, 6)
#define BCE_ROUTING_DISABLED						MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, 7)
#define BCE_ROUTER_NOT_FOUND						MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, 8)
#define BCE_VENDOR_ID_UNSPECIFIED					MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, 9)
#define BCE_INVOKE_ID_CONFLICT						MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, 10)
#define BCE_CANNOT_CREATE_TSM						MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, 11)
#define BCE_BVLC_COMMAND_FAILED						MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, 12)
#define BCE_BVLC_COMMAND_PENDING					MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, 13)
#define BCE_BVLC_NO_PENDING_COMMAND					MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, 14)
#define BCE_BVLC_CANNOT_DELETE_FD_ENTRY				MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, 15)
#define BCE_BVLC_RENEWAL_FAILED						MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, 16)
#define BCE_UNKNOWN_NETWORK_NUMBER					MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, 17)

#define BCE_BACNET_ERROR_CODE						MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, 0x0FFFFF)

#define BCE_ABORT_BASE	0x100000
//BACnet Abort Mappings
#define BCE_ABORT_OTHER								MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, BCE_ABORT_BASE + 0)
#define BCE_ABORT_BUFFER_OVERFLOW					MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, BCE_ABORT_BASE + 1)
#define BCE_ABORT_INVALID_APDU_IN_THIS_STATE		MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, BCE_ABORT_BASE + 2)
#define BCE_ABORT_PREEMPTED_BY_HIGHER_PRIORITY		MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, BCE_ABORT_BASE + 3)
#define BCE_ABORT_SEGMENTATION_NOT_SUPPORTED		MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, BCE_ABORT_BASE + 4)
#define BCE_ABORT_SECURITY_ERROR					MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, BCE_ABORT_BASE + 5)
#define BCE_ABORT_INSUFFICIENT_SECURITY				MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, BCE_ABORT_BASE + 6)
#define BCE_ABORT_WINDOW_SIZE_OUT_OF_RANGE			MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, BCE_ABORT_BASE + 7)
#define BCE_ABORT_APPLICATION_EXCEEDED_REPLY_TIME	MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, BCE_ABORT_BASE + 8)
#define BCE_ABORT_OUT_OF_RESOURCES					MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, BCE_ABORT_BASE + 9)
#define BCE_ABORT_TSM_TIMEOUT						MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, BCE_ABORT_BASE + 10)
#define BCE_ABORT_APDU_TOO_LONG						MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, BCE_ABORT_BASE + 11)

#define BCE_REJECT_BASE 0x100100
//BACnet Reject Mappings
#define BCE_REJECT_OTHER						MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, BCE_REJECT_BASE + 0)
#define BCE_REJECT_BUFFER_OVERFLOW				MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, BCE_REJECT_BASE + 1)
#define BCE_REJECT_INCONSISTENT_PARAMETERS		MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, BCE_REJECT_BASE + 2)
#define BCE_REJECT_INVALID_PARAMETER_DATATYPE	MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, BCE_REJECT_BASE + 3)
#define BCE_REJECT_INVALID_TAG					MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, BCE_REJECT_BASE + 4)
#define BCE_REJECT_MISSING_REQUIRED_PARAMETER	MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, BCE_REJECT_BASE + 5)
#define BCE_REJECT_PARAMETER_OUT_OF_RANGE		MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, BCE_REJECT_BASE + 6)
#define BCE_REJECT_TOO_MANY_ARGUMENTS			MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, BCE_REJECT_BASE + 7)
#define BCE_REJECT_UNDEFINED_ENUMERATION		MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, BCE_REJECT_BASE + 8)
#define BCE_REJECT_UNRECOGNIZED_SERVICE			MAKE_BACNETERROR(BCE_SEVERITY_ERROR, BCE_FACILITY_BACNET, BCE_REJECT_BASE + 9)

enum RejectCode
{
	Reject_Other,
	Reject_BufferOverflow,
	Reject_InconsistentParameters,
	Reject_InvalidParameterDataType,
	Reject_InvalidTag,
	Reject_MissingRequiredParameter,
	Reject_ParameterOutOfRange,
	Reject_TooManyArguments,
	Reject_UndefinedEnumeration,
	Reject_UnrecognizedService,
};

enum AbortCode
{
	Abort_Other,
	Abort_BufferOverflow,
	Abort_InvalidAPDUInThisState,
	Abort_PreemptedByHigherPriority,
	Abort_SegmentationNotSupported,
	Abort_SecurityError,
	Abort_InsufficientSecurity,
	Abort_WindowSizeOutOfRange,
	Abort_ApplicationExceededReplyTime,
	Abort_OutOfResources,
	Abort_TSMTimeout,
	Abort_APDUTooLong,
};

BACNET_FORCEINLINE BACnetResult BCNRESULT_FROM_ABORT(AbortCode rc)
{
	return BACnetResult(BCE_SEVERITY_ERROR |
						BCE_FACILITY_BACNET |
						(BCE_ABORT_BASE + rc));
}

BACNET_FORCEINLINE BACnetResult BCNRESULT_FROM_REJECT(RejectCode rc)
{
	return BACnetResult(BCE_SEVERITY_ERROR |
						BCE_FACILITY_BACNET |
						(BCE_REJECT_BASE + rc));
}
